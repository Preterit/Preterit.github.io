<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android启动优化</title>
    <url>/2019/11/22/Android%E5%90%AF%E5%8A%A8%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="绘制原理："><a href="#绘制原理：" class="headerlink" title="绘制原理："></a>绘制原理：</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理数据</span></span><br><span class="line"><span class="number">1</span>:在UI线程处理数据</span><br><span class="line">Process.setThreadPriority() 设置优先级</span><br><span class="line"><span class="number">2</span>:子线程抢占时间片，导致主线程拿不到时间片</span><br><span class="line"><span class="number">3</span>:内存增加导致GC频繁而引起卡顿</span><br><span class="line">   内存大 --&gt; GC --&gt; stop the world</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Android 应用把经过测量、布局、绘制后的surface缓存数据，通过SurfaceFlinger把数据渲染到显示屏幕上，通过Android的刷新机制来刷新绘制。</span><br><span class="line">  </span><br><span class="line">  <span class="number">1</span>:应用层负责绘制</span><br><span class="line">  <span class="number">2</span>:系统层负责渲染</span><br><span class="line">  <span class="number">3</span>:c/s架构</span><br><span class="line">  <span class="number">4</span>:SurfaceFlinger(C++)</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">应用层：</span><br><span class="line">  Measure：深度优化</span><br><span class="line">  Layout： 深度优化</span><br><span class="line">  Draw:</span><br><span class="line">    软件绘制</span><br><span class="line">    硬件加速(GPU)</span><br><span class="line">      比CPU耗电</span><br><span class="line">      兼容问题(不是所有API都支持硬件加速)</span><br><span class="line">      内存大</span><br><span class="line">    </span><br><span class="line"> Bitmap() 有回收机制，开启硬件加速后不存在回收</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 系统层：</span></span><br><span class="line"><span class="number">1</span>:相应客户端事件，创建Layer与客户端的Surface建立联系</span><br><span class="line"><span class="number">2</span>:接收客户端数据及属性，修改Layer属性，比如尺寸、颜色、透明度等</span><br><span class="line"><span class="number">3</span>:将创建的Layer内容刷新到屏幕上</span><br><span class="line"><span class="number">4</span>:维持Layer的序列，并对Layer最终输出作出裁剪计算</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">view 无限大的，屏幕大小有限</span><br><span class="line"><span class="comment">// 应用层绘制页面交由系统层进行渲染</span></span><br><span class="line">SharedClient-SharedBufferStack 匿名共享内存(大量数据不适合Bundle)</span><br><span class="line">一个App会跟SurfaceFlinger 创建一个SharedClient </span><br><span class="line">一个SharedClient会有<span class="number">31</span>个ShareBufferStack</span><br><span class="line">Android <span class="number">4.1</span>之前引用双缓冲机制</span><br><span class="line">Android <span class="number">4.1</span>之后使用的三缓冲机制</span><br><span class="line">FPS <span class="number">60</span>(HZ) <span class="number">16</span>ms Android系统中每隔<span class="number">16.6</span>ms会发送一次VSYNC信号有可能会触发UI的渲染</span><br><span class="line">  </span><br><span class="line">  VSYNC(垂直同步)</span><br><span class="line">  Choreorgrapher(调度器/指挥官) </span><br><span class="line">  	<span class="number">1</span>:Callback_input(优先级最高，与输入事件有关)</span><br><span class="line">  	<span class="number">2</span>:Callback_animation(第二优先级，与动画有关)</span><br><span class="line">    <span class="number">3</span>:Callback_traversal(最低优先级，与UI控件绘制有关)</span><br></pre></td></tr></table></figure>

<h1 id="启动优化："><a href="#启动优化：" class="headerlink" title="启动优化："></a>启动优化：</h1><ul>
<li>冷启动：后台没有该应用的进程，</li>
<li>热启动：后台存在应用进程，按下home键在启动</li>
<li>温启动：应用启动后，入口activity被干掉，(比如按下back键)，应用退出了，但是后台还是存在该应用的进程。</li>
</ul>
<h2 id="冷启动："><a href="#冷启动：" class="headerlink" title="冷启动："></a>冷启动：</h2><blockquote>
<p>加载启动的App，</p>
<p>App启动之后立即展示出一个空白的Window</p>
<p>创建App的进程，</p>
<p>创建App对象，</p>
<p>启动Main Thread</p>
<p>创建启动的Activity对象，</p>
<p>加载View，</p>
<p>布置屏幕</p>
<p>进行第一次绘制，</p>
<p>完成第一次绘制后会把Main Activity替换已经展示的Background Window</p>
</blockquote>
<h2 id="冷启动优化："><a href="#冷启动优化：" class="headerlink" title="冷启动优化："></a>冷启动优化：</h2><p>优化App启动后立刻展示出一个空白Window：</p>
<blockquote>
<p>原因：启动根Activity ActivityStack中startActivityLocked         call showStartingWindow</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用提前展示出来的Window，快速展示出一个画面，给用户快速反馈的体验</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span>：设置背景图Theme&lt;---&gt;程序启动快，界面先显示背景图，然后在刷新其他界面控件，给人刷新不同步感觉</span><br><span class="line"><span class="number">2</span>：把样式设置透明&lt;-----&gt;给人程序启动慢的感觉，界面一次性刷新出来，刷新同步</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//避免在启动时做密集沉重的初始化  </span></span><br><span class="line"></span><br><span class="line">四个维度</span><br><span class="line">  <span class="number">1</span>:必要且耗时：启动初始化，考虑用线程来初始化(MultiDex初始化，Tinker初始化)</span><br><span class="line">  <span class="number">2</span>:必要不耗时：首页绘制</span><br><span class="line">  <span class="number">3</span>:非必要耗时：数据上报，插件初识化</span><br><span class="line">  <span class="number">4</span>:非必要不耗时：直接去掉，在需要用的时候在加载，第三方组件初始化</span><br><span class="line">  </span><br><span class="line">思考方向：</span><br><span class="line">  <span class="number">1</span>:分部加载。 以大化小，优先级高的放前</span><br><span class="line">  <span class="number">2</span>:异步加载。 耗时多的异步化</span><br><span class="line">  <span class="number">3</span>:延期加载。 非必要的数据延时加载</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常见问题：</span></span><br><span class="line">Application onCreate中创建线程池，创建好了，全局使用，但是耗费资源，</span><br><span class="line">Application onCreate中做了大量初识化操作</span><br><span class="line">Application  onCreate函数多次调用 (有几个进程调用几次)</span><br><span class="line">MainActivity网络请求密集 ：接口是否可以合并，</span><br><span class="line">工作线程没有设置优先级</span><br><span class="line">  <span class="number">1</span>:AyncTask - thread_priority_background</span><br><span class="line">  <span class="number">2</span>:AsynsQueryHandler - thread_priority_default</span><br><span class="line">  <span class="number">3</span>:线程池</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通用启动优化方案</span></span><br><span class="line">	利用主题快速显示界面</span><br><span class="line">  异步初始化组件</span><br><span class="line">  通过梳理业务逻辑，延迟初始化组件、操作</span><br><span class="line">  正确使用线程。 开启一个线程池比单独开个线程耗资源</span><br><span class="line">  去掉无用代码、重复逻辑等</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>性能优化</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView缓存机制</title>
    <url>/2019/11/20/RecyclerView%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="RevyclerView缓存分析"><a href="#RevyclerView缓存分析" class="headerlink" title="RevyclerView缓存分析"></a>RevyclerView缓存分析</h1><ul>
<li>什么时候回收?什么时候复用?</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RecyclerView --&gt; onTouchEvent() 中的 MOVE事件</span><br><span class="line">	 scrollByInternal() </span><br><span class="line">    	mLayout.scrollVerticallyBy()</span><br><span class="line">    		fill();  <span class="comment">// 主要在fill()方法里面</span></span><br><span class="line">fill(recycler, mLayoutState, state, <span class="keyword">false</span>);</span><br><span class="line"><span class="comment">//1:回收 recycleByLayoutState();</span></span><br><span class="line"><span class="comment">//2:复用 layoutChunk();  // 循环添加通过addView()</span></span><br></pre></td></tr></table></figure>

<h2 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h2><blockquote>
<p><code>RecyclerView中的ItemView的measure、layout都是由LayoutManager负责的</code><br>其中LayoutManager中重要的方法：</p>
</blockquote>
<p><strong>1.fill(recycler, mLayoutState, state, false); //填充itemview</strong><br><strong>2.layoutChunk(….)</strong><br><strong>3.View next(RecyclerView.Recycler recycler)</strong></p>
<blockquote>
<p>三个方法是一级一级调用的，到next()方法这就又回到了RecyclerView.Recycler中<code>从这里可以看出LayoutManager负责RecyclerView的布局</code>然而<code>Recycler负责RecyclerView的回收与复用</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最终的方法，也就是取缓存最关键的方法</span></span><br><span class="line"><span class="function">ViewHolder <span class="title">tryGetViewHolderForPositionByDeadline</span><span class="params">(<span class="keyword">int</span> position,<span class="keyword">boolean</span> dryRun, <span class="keyword">long</span> deadlineNs)</span></span>;</span><br></pre></td></tr></table></figure>

<h3 id="一级缓存：mChangedScrap-amp-mAttachedScrap"><a href="#一级缓存：mChangedScrap-amp-mAttachedScrap" class="headerlink" title="一级缓存：mChangedScrap&amp;mAttachedScrap"></a>一级缓存：mChangedScrap&amp;mAttachedScrap</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先从mChangedScrap根据item position找，在根据id找</span></span><br><span class="line"><span class="keyword">if</span> (mState.isPreLayout()) &#123;</span><br><span class="line">    holder = getChangedScrapViewForPosition(position);</span><br><span class="line">    fromScrapOrHiddenOrCache = holder != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mAttachedScrap&amp;mCacheViews</span></span><br><span class="line"><span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">		holder = getScrapOrHiddenOrCachedHolderForPosition(position, dryRun);</span><br><span class="line"> <span class="comment">// 到mAttachedScrap 去寻找holder, mAttachedScrap是在RecyclerView重新Layout的时候，比如Resume了，会将所有的children的holder移除掉，就放到mAttachedScrap中；</span></span><br><span class="line"> <span class="comment">// 如果没有在mAttachedScrap中找到holder，就会到mCacheViews中去寻找holder</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> cacheSize = mCachedViews.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cacheSize; i++) &#123;</span><br><span class="line">      <span class="keyword">final</span> ViewHolder holder = mCachedViews.get(i);</span><br><span class="line">      <span class="keyword">if</span> (!holder.isInvalid() &amp;&amp; holder.getLayoutPosition() == position) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">              mCachedViews.remove(i);</span><br><span class="line">          &#125;</span><br><span class="line">         ........</span><br><span class="line">          <span class="keyword">return</span> holder;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二级缓存：mCacheViews"><a href="#二级缓存：mCacheViews" class="headerlink" title="二级缓存：mCacheViews"></a>二级缓存：mCacheViews</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上面根据position没有找到Holder</span></span><br><span class="line"><span class="comment">// 下面根据id去找holder</span></span><br><span class="line"><span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">  ......</span><br><span class="line"> <span class="keyword">if</span> (mAdapter.hasStableIds()) &#123;</span><br><span class="line">   .....</span><br><span class="line">   holder = getScrapOrCachedViewForId(mAdapter.getItemId(offsetPosition),type,dryRun);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">// 同样的也是根据ID在mAttachedScrap中先找，</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> count = mAttachedScrap.size();</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  	<span class="keyword">final</span> ViewHolder holder = mAttachedScrap.get(i);</span><br><span class="line">  	<span class="keyword">if</span> (holder.getItemId() == id &amp;&amp; !holder.wasReturnedFromScrap()) &#123;</span><br><span class="line">    	......</span><br><span class="line">      <span class="keyword">return</span> holder;</span><br><span class="line">  	&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//没有找到在到mCachedViews去找</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> cacheSize = mCachedViews.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = cacheSize - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  <span class="keyword">final</span> ViewHolder holder = mCachedViews.get(i);</span><br><span class="line">  <span class="keyword">if</span> (holder.getItemId() == id) &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == holder.getItemViewType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!dryRun) &#123;</span><br><span class="line">        mCachedViews.remove(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> holder;</span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三级缓存：mViewCacheExtension"><a href="#三级缓存：mViewCacheExtension" class="headerlink" title="三级缓存：mViewCacheExtension"></a>三级缓存：mViewCacheExtension</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个是用户自己定义的缓存机制，需要用户自己实现。一般没有自己定义的</span><br></pre></td></tr></table></figure>

<h3 id="四级缓存：RecycledViewPool"><a href="#四级缓存：RecycledViewPool" class="headerlink" title="四级缓存：RecycledViewPool"></a>四级缓存：RecycledViewPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//到这里会通过不同的viewType去取holder去过取到了，</span></span><br><span class="line"><span class="comment">//就holder.resetInternal()重置holder状态，变成一个新的，重新执行onBindViewHolder</span></span><br><span class="line"><span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123; <span class="comment">// fallback to pool</span></span><br><span class="line">  holder = getRecycledViewPool().getRecycledView(type);</span><br><span class="line">  <span class="keyword">if</span> (holder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    holder.resetInternal();</span><br><span class="line">    <span class="keyword">if</span> (FORCE_INVALIDATE_DISPLAY_LIST) &#123;</span><br><span class="line">      invalidateDisplayListInt(holder);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓存里没有ViewHolder"><a href="#缓存里没有ViewHolder" class="headerlink" title="缓存里没有ViewHolder"></a>缓存里没有ViewHolder</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用Adapter里面的CreateViewHolder</span></span><br><span class="line"><span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">//创建新的viewholder</span></span><br><span class="line">  holder = mAdapter.createViewHolder(RecyclerView.<span class="keyword">this</span>, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="回收"><a href="#回收" class="headerlink" title="回收"></a>回收</h2><p><strong>1.fill(recycler, mLayoutState, state, false); //填充itemview</strong><br><strong>2.recycleByLayoutState(recycler, layoutState);</strong><br><strong>3.根据当前布局方向调用适当的回收方法</strong><br><strong>4.recycleViewHolderInternal()最终的回收的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleViewHolderInternal</span><span class="params">(ViewHolder holder)</span> </span>&#123;</span><br><span class="line">  ....</span><br><span class="line">  <span class="comment">//mCachedViews默认大小为2，</span></span><br><span class="line">  <span class="comment">//判断是否还能往里装吗？</span></span><br><span class="line">  <span class="keyword">int</span> cachedViewSize = mCachedViews.size();</span><br><span class="line">  <span class="keyword">if</span> (cachedViewSize &gt;= mViewCacheMax &amp;&amp; cachedViewSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//满了，</span></span><br><span class="line">    recycleCachedViewAt(<span class="number">0</span>);</span><br><span class="line">    cachedViewSize--;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">    <span class="comment">//移除了一个之后再进行添加</span></span><br><span class="line">    <span class="comment">//代码省略</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//没满，直接装</span></span><br><span class="line">  <span class="keyword">if</span> (!cached) &#123;</span><br><span class="line">      addViewHolderToRecycledViewPool(holder, <span class="keyword">true</span>);</span><br><span class="line">      recycled = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ....</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recycleCachedViewAt</span><span class="params">(<span class="keyword">int</span> cachedViewIndex)</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">//cachedViewIndex 传进来的是0，也就是说mCachedViews是先进先出型</span></span><br><span class="line">  <span class="comment">//把第一个给取出来添加到RecycledViewPool中去，</span></span><br><span class="line">  <span class="comment">//在把第一个给移除掉</span></span><br><span class="line">  ViewHolder viewHolder = mCachedViews.get(cachedViewIndex);</span><br><span class="line">  addViewHolderToRecycledViewPool(viewHolder, <span class="keyword">true</span>);</span><br><span class="line">  mCachedViews.remove(cachedViewIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RecycledViewPool-缓存池"><a href="#RecycledViewPool-缓存池" class="headerlink" title="RecycledViewPool(缓存池)"></a>RecycledViewPool(缓存池)</h3><p><strong>private static final int DEFAULT_MAX_SCRAP = 5;   //默认缓存池大小为5</strong></p>
<p><strong>内部维护了一个SparseArray，类似HasgMap，同样是key：values形式存取数据，</strong></p>
<p><strong>SparseArray的key是RecyclerView的itemType，SparseArray的value是ScrapData</strong></p>
<p><strong>ScrapData是一个内部静态类，内部维护了ViewHolder的ArrayList</strong></p>
<blockquote>
<p>也就是说Recycler在进行VIewHolder回收的时候，会先存在mCacheViews中，mCacheViews存满了之后会把第一条拿出来存到RecycledViewPool中</p>
<p>RecycledViewPool在村ViewHolder时，由于RecycledViewPool在不设置size()的话，默认存5个，</p>
<p>RecycledViewPool存满的情况下，就不会存了。  因为存放了之后会执行scrap.resetInternal();清空ViewHolder的数据/状态/等。</p>
</blockquote>
<h3 id="ViewHolder缓存示意图"><a href="#ViewHolder缓存示意图" class="headerlink" title="ViewHolder缓存示意图"></a>ViewHolder缓存示意图</h3><img src="cache.png" style="zoom:50%;" />

<h2 id="流程图-网上找的"><a href="#流程图-网上找的" class="headerlink" title="流程图(网上找的)"></a>流程图(网上找的)</h2><img src="recyclerflow.png" style="zoom:50%;" />



]]></content>
      <categories>
        <category>RecyclerView</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>RecyclerView缓存分析</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2019/11/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>博客框架:  <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是高效的静态站点生成框架，她基于 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。 通过 Hexo 你可以轻松地使用 Markdown 编写文章。</p>
<p>主题:  <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a>     简介 ，简约 ，大气</p>
<p>服务:  github pages服务</p>
<p>优点:</p>
<ol>
<li>全是静态文件，访问速度快        </li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
</ol>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol>
<li><p>GitHub 账号，没有的话注册一个；</p>
</li>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a> ，npm ，相关</p>
</li>
<li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">git</a> </p>
</li>
</ol>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><blockquote>
<p>新建一个名为<code>你Github的用户名.github.io</code>的仓库，你的用户名是<code>zhangsan</code>，那么你的仓库名称就必须是<code>zhangsan.github.io</code> ，</p>
</blockquote>
<h2 id="绑定域名-可有可无，直接访问你的用户名-github-io-也行"><a href="#绑定域名-可有可无，直接访问你的用户名-github-io-也行" class="headerlink" title="绑定域名(可有可无，直接访问你的用户名.github.io 也行)"></a>绑定域名(可有可无，直接访问<code>你的用户名.github.io</code> 也行)</h2><p>​        首先你要注册一个域名，推荐 <a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">阿里万网</a> 价格不贵，大公司，用的也放心。</p>
<p>​        解析你的域名: </p>
<p><img src="2019-11-17_06.png" style="zoom:50%;" />            然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看        你自己喜好，</p>
<h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><blockquote>
<p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以使用ssh key来解决本地和服务器的连接问题。</p>
</blockquote>
<ul>
<li><p><a href="https://blog.csdn.net/wxrNine_/article/details/90756514" target="_blank" rel="noopener">这里就不一步一步操作了直接贴出经常访问的小网站</a></p>
</li>
<li><p>还要说一下，我在这块遇到的坑，使用<code>hexo d</code>命令上传代码的时候，怎么也传不上去，其他的配置都没问题，咋地都没想到是<code>公钥不对</code> ，被自己蠢哭了。   <code>ssh git@github.com</code> 使用这个命令检查下连接是否成功，不成功就从新生成下ssh文件，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，替换。</p>
</li>
</ul>
<h2 id="hexo-安装-初始化"><a href="#hexo-安装-初始化" class="headerlink" title="hexo 安装 /初始化"></a>hexo 安装 /初始化</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在电脑的某个地方新建一个文件夹(名字随便)</span></span><br><span class="line">npm install -g hexo  <span class="comment">// 安装</span></span><br><span class="line"></span><br><span class="line">hexo init   <span class="comment">// 初始化hexo</span></span><br></pre></td></tr></table></figure>

<p>创建完了会有如下目录结构:<img src="2019-11-17_07.png" style="zoom:50%;" /></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo g <span class="comment">//  生成</span></span><br><span class="line">hexo s <span class="comment">// 启动服务 开启本地预览服务，打开http://localhost:4000 即可看到内容</span></span><br></pre></td></tr></table></figure>

<h2 id="替换主题-这里使用的开头介绍的next"><a href="#替换主题-这里使用的开头介绍的next" class="headerlink" title="替换主题 (这里使用的开头介绍的next )"></a>替换主题 (这里使用的开头介绍的next )</h2><blockquote>
<p> 这里推荐一个主题 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a>  </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/iissnan/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改站点下<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: next</code>，然后重新执行<code>hexo g</code>来重新生成。</p>
<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p>
</li>
</ul>
<blockquote>
<p>如果出现一些莫名其妙的问题，可以先执行<code>hexo clean</code>来清理一下public的内容，然后再来重新生成和发布。</p>
</blockquote>
<h2 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h2><ul>
<li><p><code>ssh key</code> 没有问题；</p>
</li>
<li><p>配置站点下<code>_config.yml</code>中的 <code>deploy</code> 部分；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git   <span class="comment">// git</span></span><br><span class="line">repository: git<span class="meta">@github</span>.com:你的用户名/你的用户名.github.io.git</span><br><span class="line">branch: master  <span class="comment">// master分支</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>发布到GitHub上</p>
</li>
<li><p>访问<code>你的域名/你的用户名.github.io</code></p>
</li>
</ul>
<h1 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"postName"</span>         <span class="comment">// 新建文章</span></span><br><span class="line">hexo n page <span class="string">"pageName"</span>    <span class="comment">//新建页面</span></span><br><span class="line">hexo g             				<span class="comment">//生成静态页面至public目录</span></span><br><span class="line">hexo s		                <span class="comment">//开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo d			     					<span class="comment">//部署到GitHub</span></span><br><span class="line">hexo help  								<span class="comment">//查看帮助</span></span><br><span class="line">hexo version  						<span class="comment">//查看Hexo的版本</span></span><br></pre></td></tr></table></figure>







<p>/////////////////////////////////////////////////////////////</p>
<h1 id="在修改主题中遇到的坑"><a href="#在修改主题中遇到的坑" class="headerlink" title="在修改主题中遇到的坑"></a>在修改主题中遇到的坑</h1><h2 id="修改打赏功能微信支付-支付宝支付字样-抖动"><a href="#修改打赏功能微信支付-支付宝支付字样-抖动" class="headerlink" title="修改打赏功能微信支付/支付宝支付字样 抖动"></a>修改打赏功能微信支付/支付宝支付字样 抖动</h2><ul>
<li>进入下面目录，编辑post_reward.styl</li>
<li><img src="hide_reward.png" style="zoom:50%;" /></li>
<li><img src="2019-11-17_05.png" style="zoom:50%;" /></li>
<li>刷新页面 ok </li>
</ul>
<h2 id="点击搜索跳转到新窗口"><a href="#点击搜索跳转到新窗口" class="headerlink" title="点击搜索跳转到新窗口"></a>点击搜索跳转到新窗口</h2><ul>
<li>方法同上面一样，首先找到对应的文件</li>
</ul>
<img src="2019-11-17_02.png" style="zoom:50%;" />

<ul>
<li><p>找到如图位置<img src="2019-11-17_03.png" style="zoom:50%;" /></p>
</li>
<li><p>将上图<code>javascript:;</code> 修改为<code>#</code></p>
<img src="2019-11-17_04.png" alt="2019-11-17_04" style="zoom:50%;" />

</li>
</ul>
]]></content>
      <categories>
        <category>hexo</category>
        <category>next</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info:<a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing.js</a></p>
<h3 id="Run-server-Writing-js"><a href="#Run-server-Writing-js" class="headerlink" title="Run server Writing.js"></a>Run server <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing.js</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate <code>static</code> files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
